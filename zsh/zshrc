# vim:foldmethod=marker

# Optional profiling {{{

## Toggle the comment below to profile zsh start speed
# profile_startup=1

if [[ -n "$profile_startup" ]]; then
    zmodload zsh/zprof

    # Per-line profiling
    zmodload zsh/datetime
    setopt PROMPT_SUBST
    PS4='+$EPOCHREALTIME %N:%i> '

    logfile=$(mktemp zsh_profile.XXXXXXXX)
    echo "Logging to $logfile"
    exec 3>&2 2>$logfile

    setopt XTRACE
fi

# }}}

# Fix for homebrew {{{
path=( /opt/homebrew/bin $path)

# }}}


# Utility functions {{{

autoload colors && colors

for COLOR in RED GREEN YELLOW BLUE MAGENTA CYAN BLACK WHITE; do
    eval $COLOR='$fg_no_bold[${(L)COLOR}]'
    eval BOLD_$COLOR='$fg_bold[${(L)COLOR}]'
done
eval RESET='$reset_color'

_err () {
    echo "$BOLD_RED$@$RESET"
}

_warn () {
    echo "$BOLD_YELLOW$@$RESET"
}

_info () {
    echo "$BOLD_BLUE$@$RESET"
}

# }}}

# ZSH settings {{{

# Allow interactive comments
setopt interactive_comments

# Zsh completion help
bindkey '^Xh' _complete_help

# Incremental search
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^F' history-incremental-pattern-search-forward

# ctrl+arrow jumps words
bindkey "[1;5C" forward-word
bindkey "[1;5D" backward-word

# Better history
export HISTFILE=~/.zsh_history
export HISTSIZE=9999999999999999 # LONG_MAX (64-bit)
export SAVEHIST=9999999999999999
setopt HIST_IGNORE_ALL_DUPS  # do not put duplicated command into history list
setopt HIST_SAVE_NO_DUPS  # do not save duplicated command
setopt HIST_REDUCE_BLANKS  # remove unnecessary blanks
setopt INC_APPEND_HISTORY_TIME  # append command to history file immediately after execution
setopt EXTENDED_HISTORY  # record command start time

# Bash style word jumps
autoload -U select-word-style
select-word-style bash

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# }}}

# Dev environments {{{

## rye (python)
if [[ -f "$HOME/.rye/env" ]]; then
    source "$HOME/.rye/env"
fi

## Go
if whence go >/dev/null; then
    export GOPATH="$HOME/.local/go"
    mkdir -p $GOPATH
    path=( "$GOPATH/bin" $path )
fi

## Rust
if [ -d "$HOME/.cargo/" ]; then
    path=( "$HOME/.cargo/bin" $path )

    if whence rustup >/dev/null; then
        default_toolchain=stable-x86_64-unknown-linux-gnu
        export fpath=(
            "$HOME/.rustup/toolchains/$default_toolchain/share/zsh/site-functions"
            $fpath
        )
    fi
fi

## Perl6
if [ -d "$HOME/.perl6/" ]; then
    path=( "$HOME/.perl6/bin" $path )
fi

## Ruby
if [ -d ~/.rbenv ]; then
    path=( "$HOME/.rbenv/bin" $path)
    eval "$(command rbenv init -)"
fi

# }}}

# Power Tools {{{

# Inventory the toolbox
expected_tools=(
    # Essentials
    git
    difft
    shellcheck
    htop
    tree
    rye # required for setting up neovim venvs

    # Networking
    curl
    ncat
    dig
    rsync

    # Power tools
    rg
    fzf
    fd
    starship
    zoxide
)

missing=()
for tool in ${expected_tools[@]}; do
    if ! whence "$tool" >/dev/null; then
        missing+=("$tool")
    fi
done
if [[ ${#missing[@]} -ne 0 ]]; then
    _warn Expected ${(j., .)missing} to be installed
fi

if whence zoxide >/dev/null; then
    eval "$(zoxide init --cmd j zsh)"
fi

## set up bat's theme and it as man pager if it's installed
export BAT_THEME="Catppuccin Mocha"
if whence bat >/dev/null; then
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

# Starship prompt
eval "$(starship init zsh)"

# Atuin
if whence atuin >/dev/null; then
    eval "$(atuin init zsh --disable-up-arrow)"
fi

# }}}

# Environment {{{

## Editor
if whence hx >/dev/null; then
    export EDITOR='hx'
elif whence nvim >/dev/null; then
    export EDITOR='nvim'
else
    export EDITOR='vim'
fi

## gopass completion
export fpath=( "$HOME/.local/go/share/zsh/site-functions" $fpath )

# }}}

# Includes {{{

# aliases
source ~/.dotfiles/zsh/aliases.zsh

# }}}

# Final checks {{{

# Scripts in ~/.local/bin take precedence:
path=( ~/.local/bin $path )

# dedupe path array (-U is for unique array)
typeset -aU path
export path

# Print packages to update
# requires passwordless sudo: <username> ALL=(ALL) NOPASSWD: /usr/bin/pacman
if whence pacman >/dev/null; then
    if [[ ! -e ~/.checked-updates ]] || [[ $(($(date +%s) - $(stat -c %Y ~/.checked-updates))) -gt 86400 ]]; then
        sudo pacman -Sy && touch ~/.checked-updates
        sudo pacman -Syup --print-format "%n" \
            && touch ~/.checked-updates
    fi
    function () {
        local n_updates=$(pacman -Sup | wc -l)

        if [[ n_updates -gt 0 ]]; then
            _info "$n_updates packages out of date"
        fi
    }
fi

# End per-line profiling
if [[ -n "$profile_startup" ]]; then
    unsetopt XTRACE
    exec 2>&3 3>&-
fi

# }}}
