# =================================
# == ZSH/ohmyzsh initianlisation ==
# =================================

## Toggle the comment below to profile zsh start speed
# profile_startup=1

if [[ -n "$profile_startup" ]]; then
    zmodload zsh/zprof

    # Per-line profiling
    zmodload zsh/datetime
    setopt PROMPT_SUBST
    PS4='+$EPOCHREALTIME %N:%i> '

    logfile=$(mktemp zsh_profile.XXXXXXXX)
    echo "Logging to $logfile"
    exec 3>&2 2>$logfile

    setopt XTRACE
fi

# Starship prompt
eval "$(starship init zsh)"

# =======================
# == Utility functions ==
# =======================

alert () {
    echo "\e[1;31m$@\e[0m"
}


# ===============
# == OSX hacks ==
# ===============

if [[ "$(uname -s)" =~ Darwin ]] && [[ "$(uname -m)" != "arm64" ]]; then
    # /usr/libexec/path_helper is path unhelpful
    path=(
        "/usr/local/bin"
        "/usr/bin"
        "/bin"
        "/usr/sbin"
        "/sbin"
    )

    # Use GNU tools not crappy BSD ones
    path=( "/usr/local/opt/coreutils/libexec/gnubin" $path )
fi


# ========================
# == ZSH settings ==
# ========================

# Zsh completion help
bindkey '^Xh' _complete_help

# Incremental search
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^F' history-incremental-pattern-search-forward

# Biggest history
export HISTSIZE=9999999999999999 # LONG_MAX (64-bit)
export SAVEHIST=9999999999999999


# ======================
# == Dev environments ==
# ======================

# virtualenvwrapper

if whence pyenv >/dev/null ; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
fi

## poetry
[[ -d ~/.poetry/bin/ ]] && path=( ~/.poetry/bin/ $path )

## Go
if whence go >/dev/null; then
    export GOPATH="$HOME/.local/go"
    mkdir -p $GOPATH
    path=( "$GOPATH/bin" $path )
fi

## Rust
if [ -d "$HOME/.cargo/" ]; then
    path=( "$HOME/.cargo/bin" $path )

    if whence rustup >/dev/null; then
        default_toolchain=stable-x86_64-unknown-linux-gnu
        export fpath=(
            "$HOME/.rustup/toolchains/$default_toolchain/share/zsh/site-functions"
            $fpath
        )
    fi
fi

## Perl6
if [ -d "$HOME/.perl6/" ]; then
    path=( "$HOME/.perl6/bin" $path )
fi


#=================
#== Power Tools ==
#=================

# Inventory the toolbox
expected_tools=(
    # Essentials
    exa
    git
    delta
    shellcheck
    htop
    tree

    # Networking
    curl
    nc
    dig
    rsync

    # Power tools
    rg
    fzf
    fd
    zoxide
)

missing=()
for tool in ${expected_tools[@]}; do
    if ! whence "$tool" >/dev/null; then
        missing+=("$tool")
    fi
done
if [[ ${#missing[@]} -ne 0 ]]; then
    alert Expected ${(j., .)missing} to be installed
fi

# fzf (https://github.com/junegunn/fzf)
if whence fzf >/dev/null; then
    export FZF_DEFAULT_OPTS="--height 25% --border"
    if whence rg >/dev/null; then
        export FZF_DEFAULT_COMMAND='fd --type f'
        export FZF_CTRL_T_COMMAND='fd --type f'
    fi
    if [[ -d /usr/share/fzf ]]; then
        source /usr/share/fzf/key-bindings.zsh
        source /usr/share/fzf/completion.zsh
    elif [[ -d /usr/local/Cellar/fzf ]]; then
        # This glob is hacky but we should only have one fzf version intalled
        source /usr/local/Cellar/fzf/*/shell/key-bindings.zsh
        source /usr/local/Cellar/fzf/*/shell/completion.zsh
    fi
fi

eval "$(zoxide init --cmd j zsh)"

#=================
#== Environment ==
#=================

## Editor
if whence nvim >/dev/null; then
    export EDITOR='nvim'
else
    export EDITOR='vim'
fi

## gopass completion
export fpath=( "$HOME/.local/go/share/zsh/site-functions" $fpath )


# ==============
# == Includes ==
# ==

# work config
if [[ -f "$HOME/.work-dotfiles/zshrc" ]]; then
    source "$HOME/.work-dotfiles/zshrc"
fi

# aliases
source ~/.dotfiles/zsh/aliases.zsh

# lazy loading
source ~/.dotfiles/zsh/lazyload.zsh


# ==================
# == Final checks ==
# ==================

# Scripts in ~/.local/bin take precedence:
path=( ~/.local/bin $path )

# dedupe path array (-U is for unique array)
typeset -aU path
export path

# Print packages to update
# requires passwordless sudo: <username> ALL=(ALL) NOPASSWD: /usr/bin/pacman
if whence pacman >/dev/null; then
    if [[ ! -e ~/.checked-updates ]] || [[ $(($(date +%s) - $(stat -c %Y ~/.checked-updates))) -gt 86400 ]]; then
        sudo pacman -Syup --print-format "%n" \
            && touch ~/.checked-updates
    fi
fi

# End per-line profiling
if [[ -n "$profile_startup" ]]; then
    unsetopt XTRACE
    exec 2>&3 3>&-
fi
